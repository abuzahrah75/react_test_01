import fs from 'fs';
import path from 'path';
import retry from 'async-retry';
import { assign, forEach, snakeCase, each } from 'lodash';
import Sequelize, { DataTypes } from 'sequelize';

const models = {};

const ID = {
  _autoGenerated: true,
  _modelAttribute: true,
  allowNull: false,
  autoIncrement: true,
  field: 'id',
  fieldName: 'id',
  primaryKey: true,
  type: DataTypes.BIGINT.UNSIGNED,
};

const TIMESTAMP_FIELDS = {
  createdAt: {
    type: Sequelize.DATE,
    field: 'created_at',
  },
  updatedAt: {
    type: Sequelize.DATE,
    field: 'updated_at',
  },
};

const FK_OPTIONS = {
  onUpdate: 'RESTRICT',
  onDelete: 'RESTRICT',
};

function beforeDefine(attrs, opts) {
  // add primary key (BIGINT), and reorders so id is first
  const newAttrs = {
    id: ID,
    ...attrs,
    ...TIMESTAMP_FIELDS,
  };
  forEach(attrs, (value, key) => {
    delete attrs[key]; // eslint-disable-line no-param-reassign
  });
  assign(attrs, newAttrs);

  // db snakeCase
  forEach(attrs, (fieldOpts, fieldName) => {
    if (!fieldOpts.field) {
      // eslint-disable-next-line no-param-reassign
      fieldOpts.field = snakeCase(fieldName);
    }
  });

  // timestamps, and snakecase table name
  assign(opts, {
    tableName: snakeCase(opts.name.plural),
    timestamps: true,
    updatedAt: 'updatedAt',
    createdAt: 'createdAt',
    underscored: true,
    underscoredAll: true,
  });
}

const sequelize = new Sequelize('mysql_db', 'user', 'password', {
  host: 'db',
  dialect: 'mysql',
  operatorsAliases: false,
  pool: {
    max: 5,
    min: 0,
    acquire: 300000,
    idle: 10000,
  },
  hooks: {
    beforeDefine,
  },
  logging: false,
});

export async function initModels() {
  try {
    await retry(() => sequelize.authenticate(), { retries: 30 });
    console.log('Connection has been established successfully.');
  } catch (e) {
    console.error('Unable to connect to the database:', e);
    throw e;
  }

  const modelFiles = fs.readdirSync(__dirname).filter(file => file !== 'index.js' && file.endsWith('.js'));

  modelFiles.forEach(file => {
    const model = sequelize.import(path.join(__dirname, file));
    models[model.name] = model;
  });

  each(models, model => {
    if (model.associate) {
      model.associate(models, FK_OPTIONS);
    }
  });

  // const NODE_ENV = process.env.NODE_ENV || 'development';
  // if (NODE_ENV === 'development') {
  //   await sequelize.sync({ force: true });
  // }
}

export default models;
